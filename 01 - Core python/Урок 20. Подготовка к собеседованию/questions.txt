ПОДГОТОВКА К СОБЕСЕДОВАНИЮ

### Вопросы по курсу Core Python. Часть 1

### Переменные

1. Что такое переменная в Python и как она создается?
"переменная пайтон" - некий "объект" в котором содержатся определенные данные, которые нужны для выполнения кода.
 Для создания переменной ей нужно придумать название и приравнять ее к нужному значению
2. Какие правила нужно соблюдать при именовании переменных в Python?
не стоит называть переменные именами внутренних функций пайтон. Например: list, print, sum и т.д
так же стоит помнить о "читаемости" кода. Соответсвенно переменные лучше называть логически.
К примеру, если нам нужна переменная с полным списком студентов, стоит назвать ее "students_list".
Так же нужно помнить что пайтон не приемлет названия переменных в верхнем регистре.
3. Как присвоить значение переменной и изменить его?
Значение переменной назначается знаком =. Изменения в переменной происходят в значениях после знака
4. Что такое динамическая типизация в Python?
динамическая типизация означает что переменные не имеют фиксированного типа.
Пайтон автоматически присваивает переменной тип.
5. Что такое глобальные и локальные переменные? Приведите пример.
К глобальным переменам может обращаться любая функция в коде. Локальные же предназначены для определенных функций в которых они и используются.
Локальные переменные не могут вызываться другими функциями кода

### Строки

1. Как создать строку в Python? Приведите различные способы.
Строку в пайтон создать достаточно просто, но к сожалению я знаю лишь 2 способа.
Способ 1 - создание строки с помощью знака ""
s1 = "Привет Мир!"
print(s1)
Способ второй - создание строки с помощью str()
num = 123
s2 = str(num)
print(s2)
2. Какие основные методы строк вы знаете? Приведите примеры использования методов `split()`, `join()`, `replace()`.
.lower() / .upper() — преобразование в нижний/верхний регистр
.strip() — удаляет пробелы и спецсимволы в начале и конце
.replace() — заменяет одну подстроку на другую
.split() — разбивает строку на список подстрок
.join() — объединяет элементы списка в строку через разделитель
3. Как использовать форматирование строк с помощью метода `format()` и f-строк?
info = f"Меня зовут {name} и мне {age} лет."
print(info)
name = "Alice"
age = 25
info = "Меня зовут {} и мне {} лет.".format(name, age)
print(info)
4. Как извлекать подстроки с помощью индексов и срезов?
text = "Hello, World!"
print(text[0])
print(text[-1])
print(text[0:5])
5. Как конкатенировать и умножать строки?
s1 = "Hello"
s2 = "World"
s3 = s1 + " " + s2
print(s3)
s = "Ha" * 3
print(s)

### Условия

1. Как работают условные операторы `if`, `elif` и `else`? Приведите пример.
Условные операторы if и elif для логического понимания можно перевести как "Если".
соответсвенно: Допустим у нас есть 2 числа (а = 5 и b =9). Мы можем написать код в котором укажем
что если(if) а < b то пайтон должен написать что 9 наибольшее число(print("{b} Наибольшее число").
а если (elif) a > b тогда пайтон должен написать что 5 наибольшее число(print("{a} Наибольшее число").
Так же существует оператор else. После того как мы написали нужные нам условия можно указать что else(если прошлае условия не выполняются тогда...)
и прописать последнее действие. else: print("Числа равны")
Не стоит забывать что после этих операторов обязательно нужно указывать знак : , а так же соблюдать отступ в один Tab.
2. Как использовать логические операторы `and`, `or` и `not` в условных выражениях?
Эти операторы очень верно названы логическими - ведь они делают именно то как они переводятся для нас(русско говорящих)
оператор `and` обозначает "и".
оператор `or` обозначает "или"
оператор `not` обозначает "нет"
3. Что такое тернарный оператор и как его использовать в Python?
тернарный оператор делает код более компактным, позволяя записывать условных операторов if, else в одну строку
4. Как вложенные условные операторы помогают в сложных логических проверках?
Вложенные условные операторы позволяют обрабатывать более сложные логические условия, когда одно условие зависит от другого.
5. Как сравниваются строки в условных операторах?
В Python строки сравниваются лексикографически (как в словаре), посимвольно
print("apple" < "banana")
print("car" > "bus")
print("hello" == "Hello")
print("abc" < "abd")
### Списки

1. Как создать список в Python и как добавить элементы в список?
список в пайтон создается несложно. мы создаем переменную (допучтим students_list)
 и уже внутри переменной создаем список знаком []
2. Какие методы списка вы знаете? Приведите примеры использования методов `append()`, `remove()`, `pop()`.
метод `append()` позволяет добавить элемент в список
метод `remove()` позволяет удалить элемент из списка
метод` pop()`  для удаления и возврата элемента из списка по указанному индексу. Если индекс не указан, удаляется и возвращается последний элемент.
3. Как работать со срезами списков?
Срезы (slices) позволяют получать подсписки, выбирая элементы по индексу
4. Как объединить два списка и как найти общие элементы?
Объединение списков
Используется оператор + или метод .extend()
Можно использовать set.intersection() или генератор списка
5. Как отсортировать список по возрастанию и убыванию?
Метод sort() – изменяет список на месте.
Функция sorted() – создает новый отсортированный список.
Можно передавать функцию в параметр key
### Циклы

1. Как работает цикл `for` в Python? Приведите пример.
в цикл вводится переменная (х) для которой существуют некие условия
for x in range(1, 10)
2. Как работает цикл `while`? Приведите пример.
Цикл while выполняет блок кода до тех пор, пока условие истинно (True).
Если условие становится ложным (False), выполнение цикла прекращается.
num = 1
while num <= 5:
    print(num)
    num += 1

3. Как использовать операторы `break` и `continue` в циклах?
оператор `break` прерывает цикл. оператор `continue` продолжает выполнять код пропуская иттерацию
4. Как создавать вложенные циклы?
Вложенные циклы — это циклы внутри других циклов.
Они полезны, например, для работы с многомерными структурами (списками, таблицами и т. д.).
5. Как итерироваться по списку с использованием индексов?
Можно перебирать элементы списка двумя основными способами:

Прямой перебор элементов (for in)
Перебор по индексам (range(len()))

### Итераторы и генераторы списков

1. Что такое итератор и как он используется в Python?
2. Как создать генератор списка? Приведите пример.
3. В чем разница между списковыми включениями и обычными циклами `for`?
4. Как работают функции `iter()` и `next()`?
5. Как создать и использовать генератор для чтения большого файла построчно?

### Словари, кортежи, множества

1. Как создать словарь и как добавлять в него элементы?
update добавить элемент
2. Как получить значение из словаря по ключу и как проверить существование ключа?
3. Как работают кортежи и чем они отличаются от списков?
4. Что такое множество и каковы его основные операции (объединение, пересечение, разность)?
5. Как итерироваться по ключам и значениям словаря?

### Функции

1. Как определить функцию в Python и как вызвать ее?
2. Как работают аргументы функции и какие виды аргументов существуют (позиционные, именованные)?
3. Как задать значения аргументов по умолчанию?
4. Что такое область видимости (scope) переменных в функциях?
5. Как вернуть несколько значений из функции?
вернет кортеж

### Args, kwargs. Замыкания функций

1. Что такое `args` и `*kwargs` и как их использовать в функциях?
2. Как работают замыкания (closures) и для чего они могут быть полезны?
3. Как передать произвольное количество аргументов в функцию?
4. В чем разница между `args` и `*kwargs`?